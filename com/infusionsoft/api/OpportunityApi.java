/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiCallback;
import com.infusionsoft.ApiClient;
import com.infusionsoft.ApiException;
import com.infusionsoft.ApiResponse;
import com.infusionsoft.Configuration;
import com.infusionsoft.Pair;
import com.infusionsoft.ProgressRequestBody;
import com.infusionsoft.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftOpportunity;
import com.infusionsoft.model.InfusionsoftOpportunityList;
import com.infusionsoft.model.InfusionsoftSalesPipeline;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OpportunityApi {
    private ApiClient apiClient;

    public OpportunityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OpportunityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createOpportunityUsingPOST
     * @param opportunity opportunity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOpportunityUsingPOSTCall(InfusionsoftOpportunity opportunity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = opportunity;

        // create path and map variables
        String localVarPath = "/opportunities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOpportunityUsingPOSTValidateBeforeCall(InfusionsoftOpportunity opportunity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createOpportunityUsingPOSTCall(opportunity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an Opportunity
     * Creates a new opportunity as the authenticated user. NB: Opportunity must contain values for &#x60;opportunity_title&#x60;, &#x60;contact&#x60;, and &#x60;stage&#x60;.
     * @param opportunity opportunity (optional)
     * @return InfusionsoftOpportunity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftOpportunity createOpportunityUsingPOST(InfusionsoftOpportunity opportunity) throws ApiException {
        ApiResponse<InfusionsoftOpportunity> resp = createOpportunityUsingPOSTWithHttpInfo(opportunity);
        return resp.getData();
    }

    /**
     * Create an Opportunity
     * Creates a new opportunity as the authenticated user. NB: Opportunity must contain values for &#x60;opportunity_title&#x60;, &#x60;contact&#x60;, and &#x60;stage&#x60;.
     * @param opportunity opportunity (optional)
     * @return ApiResponse&lt;InfusionsoftOpportunity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftOpportunity> createOpportunityUsingPOSTWithHttpInfo(InfusionsoftOpportunity opportunity) throws ApiException {
        com.squareup.okhttp.Call call = createOpportunityUsingPOSTValidateBeforeCall(opportunity, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftOpportunity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Opportunity (asynchronously)
     * Creates a new opportunity as the authenticated user. NB: Opportunity must contain values for &#x60;opportunity_title&#x60;, &#x60;contact&#x60;, and &#x60;stage&#x60;.
     * @param opportunity opportunity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOpportunityUsingPOSTAsync(InfusionsoftOpportunity opportunity, final ApiCallback<InfusionsoftOpportunity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOpportunityUsingPOSTValidateBeforeCall(opportunity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftOpportunity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOpportunityUsingGET
     * @param opportunityId opportunityId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOpportunityUsingGETCall(Long opportunityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/opportunities/{opportunityId}"
            .replaceAll("\\{" + "opportunityId" + "\\}", apiClient.escapeString(opportunityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOpportunityUsingGETValidateBeforeCall(Long opportunityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'opportunityId' is set
        if (opportunityId == null) {
            throw new ApiException("Missing the required parameter 'opportunityId' when calling getOpportunityUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getOpportunityUsingGETCall(opportunityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an Opportunity
     * Retrives a single opportunity
     * @param opportunityId opportunityId (required)
     * @return InfusionsoftOpportunity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftOpportunity getOpportunityUsingGET(Long opportunityId) throws ApiException {
        ApiResponse<InfusionsoftOpportunity> resp = getOpportunityUsingGETWithHttpInfo(opportunityId);
        return resp.getData();
    }

    /**
     * Retrieve an Opportunity
     * Retrives a single opportunity
     * @param opportunityId opportunityId (required)
     * @return ApiResponse&lt;InfusionsoftOpportunity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftOpportunity> getOpportunityUsingGETWithHttpInfo(Long opportunityId) throws ApiException {
        com.squareup.okhttp.Call call = getOpportunityUsingGETValidateBeforeCall(opportunityId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftOpportunity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an Opportunity (asynchronously)
     * Retrives a single opportunity
     * @param opportunityId opportunityId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOpportunityUsingGETAsync(Long opportunityId, final ApiCallback<InfusionsoftOpportunity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOpportunityUsingGETValidateBeforeCall(opportunityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftOpportunity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOpportunitiesUsingGET
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param userId Returns opportunities for the provided user id (optional)
     * @param stageId Returns opportunities for the provided stage id (optional)
     * @param searchTerm Returns opportunities that match any of the contact&#39;s &#x60;given_name&#x60;, &#x60;family_name&#x60;, &#x60;company_name&#x60;, and &#x60;email_addresses&#x60; (searches &#x60;EMAIL1&#x60; only) fields as well as &#x60;opportunity_title&#x60; (optional)
     * @param order Attribute to order items by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listOpportunitiesUsingGETCall(Integer limit, Integer offset, Long userId, Long stageId, String searchTerm, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/opportunities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (stageId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stage_id", stageId));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search_term", searchTerm));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOpportunitiesUsingGETValidateBeforeCall(Integer limit, Integer offset, Long userId, Long stageId, String searchTerm, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listOpportunitiesUsingGETCall(limit, offset, userId, stageId, searchTerm, order, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Opportunities
     * Retrieves a list of all opportunities
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param userId Returns opportunities for the provided user id (optional)
     * @param stageId Returns opportunities for the provided stage id (optional)
     * @param searchTerm Returns opportunities that match any of the contact&#39;s &#x60;given_name&#x60;, &#x60;family_name&#x60;, &#x60;company_name&#x60;, and &#x60;email_addresses&#x60; (searches &#x60;EMAIL1&#x60; only) fields as well as &#x60;opportunity_title&#x60; (optional)
     * @param order Attribute to order items by (optional)
     * @return InfusionsoftOpportunityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftOpportunityList listOpportunitiesUsingGET(Integer limit, Integer offset, Long userId, Long stageId, String searchTerm, String order) throws ApiException {
        ApiResponse<InfusionsoftOpportunityList> resp = listOpportunitiesUsingGETWithHttpInfo(limit, offset, userId, stageId, searchTerm, order);
        return resp.getData();
    }

    /**
     * List Opportunities
     * Retrieves a list of all opportunities
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param userId Returns opportunities for the provided user id (optional)
     * @param stageId Returns opportunities for the provided stage id (optional)
     * @param searchTerm Returns opportunities that match any of the contact&#39;s &#x60;given_name&#x60;, &#x60;family_name&#x60;, &#x60;company_name&#x60;, and &#x60;email_addresses&#x60; (searches &#x60;EMAIL1&#x60; only) fields as well as &#x60;opportunity_title&#x60; (optional)
     * @param order Attribute to order items by (optional)
     * @return ApiResponse&lt;InfusionsoftOpportunityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftOpportunityList> listOpportunitiesUsingGETWithHttpInfo(Integer limit, Integer offset, Long userId, Long stageId, String searchTerm, String order) throws ApiException {
        com.squareup.okhttp.Call call = listOpportunitiesUsingGETValidateBeforeCall(limit, offset, userId, stageId, searchTerm, order, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftOpportunityList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Opportunities (asynchronously)
     * Retrieves a list of all opportunities
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param userId Returns opportunities for the provided user id (optional)
     * @param stageId Returns opportunities for the provided stage id (optional)
     * @param searchTerm Returns opportunities that match any of the contact&#39;s &#x60;given_name&#x60;, &#x60;family_name&#x60;, &#x60;company_name&#x60;, and &#x60;email_addresses&#x60; (searches &#x60;EMAIL1&#x60; only) fields as well as &#x60;opportunity_title&#x60; (optional)
     * @param order Attribute to order items by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOpportunitiesUsingGETAsync(Integer limit, Integer offset, Long userId, Long stageId, String searchTerm, String order, final ApiCallback<InfusionsoftOpportunityList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOpportunitiesUsingGETValidateBeforeCall(limit, offset, userId, stageId, searchTerm, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftOpportunityList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOpportunityStagePipelinesUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listOpportunityStagePipelinesUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/opportunity/stage_pipeline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOpportunityStagePipelinesUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listOpportunityStagePipelinesUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Opportunity Stage Pipeline
     * Retrieves a list of all opportunity stages with pipeline details
     * @return List&lt;InfusionsoftSalesPipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InfusionsoftSalesPipeline> listOpportunityStagePipelinesUsingGET() throws ApiException {
        ApiResponse<List<InfusionsoftSalesPipeline>> resp = listOpportunityStagePipelinesUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * List Opportunity Stage Pipeline
     * Retrieves a list of all opportunity stages with pipeline details
     * @return ApiResponse&lt;List&lt;InfusionsoftSalesPipeline&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InfusionsoftSalesPipeline>> listOpportunityStagePipelinesUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listOpportunityStagePipelinesUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<InfusionsoftSalesPipeline>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Opportunity Stage Pipeline (asynchronously)
     * Retrieves a list of all opportunity stages with pipeline details
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOpportunityStagePipelinesUsingGETAsync(final ApiCallback<List<InfusionsoftSalesPipeline>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOpportunityStagePipelinesUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InfusionsoftSalesPipeline>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOpportunityUsingPUT
     * @param opportunity opportunity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOpportunityUsingPUTCall(InfusionsoftOpportunity opportunity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = opportunity;

        // create path and map variables
        String localVarPath = "/opportunities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOpportunityUsingPUTValidateBeforeCall(InfusionsoftOpportunity opportunity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = updateOpportunityUsingPUTCall(opportunity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace an Opportunity
     * Replaces all values of a given opportunity
     * @param opportunity opportunity (optional)
     * @return InfusionsoftOpportunity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftOpportunity updateOpportunityUsingPUT(InfusionsoftOpportunity opportunity) throws ApiException {
        ApiResponse<InfusionsoftOpportunity> resp = updateOpportunityUsingPUTWithHttpInfo(opportunity);
        return resp.getData();
    }

    /**
     * Replace an Opportunity
     * Replaces all values of a given opportunity
     * @param opportunity opportunity (optional)
     * @return ApiResponse&lt;InfusionsoftOpportunity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftOpportunity> updateOpportunityUsingPUTWithHttpInfo(InfusionsoftOpportunity opportunity) throws ApiException {
        com.squareup.okhttp.Call call = updateOpportunityUsingPUTValidateBeforeCall(opportunity, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftOpportunity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace an Opportunity (asynchronously)
     * Replaces all values of a given opportunity
     * @param opportunity opportunity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOpportunityUsingPUTAsync(InfusionsoftOpportunity opportunity, final ApiCallback<InfusionsoftOpportunity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOpportunityUsingPUTValidateBeforeCall(opportunity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftOpportunity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateProperitesOnOpportunityUsingPATCH
     * @param opportunityId opportunityId (required)
     * @param opportunity opportunity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProperitesOnOpportunityUsingPATCHCall(Long opportunityId, InfusionsoftOpportunity opportunity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = opportunity;

        // create path and map variables
        String localVarPath = "/opportunities/{opportunityId}"
            .replaceAll("\\{" + "opportunityId" + "\\}", apiClient.escapeString(opportunityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProperitesOnOpportunityUsingPATCHValidateBeforeCall(Long opportunityId, InfusionsoftOpportunity opportunity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'opportunityId' is set
        if (opportunityId == null) {
            throw new ApiException("Missing the required parameter 'opportunityId' when calling updateProperitesOnOpportunityUsingPATCH(Async)");
        }
        

        com.squareup.okhttp.Call call = updateProperitesOnOpportunityUsingPATCHCall(opportunityId, opportunity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an Opportunity
     * Updates an opportunity with only the values provided in the request.
     * @param opportunityId opportunityId (required)
     * @param opportunity opportunity (optional)
     * @return InfusionsoftOpportunity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftOpportunity updateProperitesOnOpportunityUsingPATCH(Long opportunityId, InfusionsoftOpportunity opportunity) throws ApiException {
        ApiResponse<InfusionsoftOpportunity> resp = updateProperitesOnOpportunityUsingPATCHWithHttpInfo(opportunityId, opportunity);
        return resp.getData();
    }

    /**
     * Update an Opportunity
     * Updates an opportunity with only the values provided in the request.
     * @param opportunityId opportunityId (required)
     * @param opportunity opportunity (optional)
     * @return ApiResponse&lt;InfusionsoftOpportunity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftOpportunity> updateProperitesOnOpportunityUsingPATCHWithHttpInfo(Long opportunityId, InfusionsoftOpportunity opportunity) throws ApiException {
        com.squareup.okhttp.Call call = updateProperitesOnOpportunityUsingPATCHValidateBeforeCall(opportunityId, opportunity, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftOpportunity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Opportunity (asynchronously)
     * Updates an opportunity with only the values provided in the request.
     * @param opportunityId opportunityId (required)
     * @param opportunity opportunity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProperitesOnOpportunityUsingPATCHAsync(Long opportunityId, InfusionsoftOpportunity opportunity, final ApiCallback<InfusionsoftOpportunity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProperitesOnOpportunityUsingPATCHValidateBeforeCall(opportunityId, opportunity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftOpportunity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

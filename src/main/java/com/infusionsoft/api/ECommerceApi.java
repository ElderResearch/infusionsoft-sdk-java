/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.api;

import com.infusionsoft.ApiCallback;
import com.infusionsoft.ApiClient;
import com.infusionsoft.ApiException;
import com.infusionsoft.ApiResponse;
import com.infusionsoft.Configuration;
import com.infusionsoft.Pair;
import com.infusionsoft.ProgressRequestBody;
import com.infusionsoft.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.infusionsoft.model.InfusionsoftError;
import com.infusionsoft.model.InfusionsoftOrder;
import com.infusionsoft.model.InfusionsoftOrderList;
import com.infusionsoft.model.InfusionsoftTransaction;
import com.infusionsoft.model.InfusionsoftTransactionList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ECommerceApi {
    private ApiClient apiClient;

    public ECommerceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ECommerceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getOrderUsingGET
     * @param orderId orderId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderUsingGETCall(Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderUsingGETValidateBeforeCall(Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderUsingGETCall(orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an Order
     * Retrieves a single order. The order may or may not have items.
     * @param orderId orderId (required)
     * @return InfusionsoftOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftOrder getOrderUsingGET(Long orderId) throws ApiException {
        ApiResponse<InfusionsoftOrder> resp = getOrderUsingGETWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Retrieve an Order
     * Retrieves a single order. The order may or may not have items.
     * @param orderId orderId (required)
     * @return ApiResponse&lt;InfusionsoftOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftOrder> getOrderUsingGETWithHttpInfo(Long orderId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderUsingGETValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an Order (asynchronously)
     * Retrieves a single order. The order may or may not have items.
     * @param orderId orderId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderUsingGETAsync(Long orderId, final ApiCallback<InfusionsoftOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderUsingGETValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionUsingGET
     * @param transactionId transactionId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionUsingGETCall(Long transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{transactionId}"
            .replaceAll("\\{" + "transactionId" + "\\}", apiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionUsingGETValidateBeforeCall(Long transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getTransactionUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionUsingGETCall(transactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Transaction
     * Retrieves a single transaction
     * @param transactionId transactionId (required)
     * @return InfusionsoftTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTransaction getTransactionUsingGET(Long transactionId) throws ApiException {
        ApiResponse<InfusionsoftTransaction> resp = getTransactionUsingGETWithHttpInfo(transactionId);
        return resp.getData();
    }

    /**
     * Retrieve a Transaction
     * Retrieves a single transaction
     * @param transactionId transactionId (required)
     * @return ApiResponse&lt;InfusionsoftTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTransaction> getTransactionUsingGETWithHttpInfo(Long transactionId) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionUsingGETValidateBeforeCall(transactionId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Transaction (asynchronously)
     * Retrieves a single transaction
     * @param transactionId transactionId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionUsingGETAsync(Long transactionId, final ApiCallback<InfusionsoftTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionUsingGETValidateBeforeCall(transactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOrdersUsingGET
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param paid Sets paid status of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @param contactId Returns orders for the provided contact id (optional)
     * @param productId Returns orders containing the provided product id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listOrdersUsingGETCall(String since, String until, Integer limit, Integer offset, Boolean paid, String order, Long contactId, Long productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (paid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paid", paid));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (contactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact_id", contactId));
        if (productId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product_id", productId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOrdersUsingGETValidateBeforeCall(String since, String until, Integer limit, Integer offset, Boolean paid, String order, Long contactId, Long productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listOrdersUsingGETCall(since, until, limit, offset, paid, order, contactId, productId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Orders
     * Retrieves a list of all orders using the specified search criteria. Each order may or may not have items.
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param paid Sets paid status of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @param contactId Returns orders for the provided contact id (optional)
     * @param productId Returns orders containing the provided product id (optional)
     * @return InfusionsoftOrderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftOrderList listOrdersUsingGET(String since, String until, Integer limit, Integer offset, Boolean paid, String order, Long contactId, Long productId) throws ApiException {
        ApiResponse<InfusionsoftOrderList> resp = listOrdersUsingGETWithHttpInfo(since, until, limit, offset, paid, order, contactId, productId);
        return resp.getData();
    }

    /**
     * List Orders
     * Retrieves a list of all orders using the specified search criteria. Each order may or may not have items.
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param paid Sets paid status of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @param contactId Returns orders for the provided contact id (optional)
     * @param productId Returns orders containing the provided product id (optional)
     * @return ApiResponse&lt;InfusionsoftOrderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftOrderList> listOrdersUsingGETWithHttpInfo(String since, String until, Integer limit, Integer offset, Boolean paid, String order, Long contactId, Long productId) throws ApiException {
        com.squareup.okhttp.Call call = listOrdersUsingGETValidateBeforeCall(since, until, limit, offset, paid, order, contactId, productId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftOrderList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Orders (asynchronously)
     * Retrieves a list of all orders using the specified search criteria. Each order may or may not have items.
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param paid Sets paid status of items to return (optional)
     * @param order Attribute to order items by (optional)
     * @param contactId Returns orders for the provided contact id (optional)
     * @param productId Returns orders containing the provided product id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOrdersUsingGETAsync(String since, String until, Integer limit, Integer offset, Boolean paid, String order, Long contactId, Long productId, final ApiCallback<InfusionsoftOrderList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOrdersUsingGETValidateBeforeCall(since, until, limit, offset, paid, order, contactId, productId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftOrderList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransactionsForOrderUsingGET
     * @param orderId orderId (required)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Returns transactions for the provided contact id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransactionsForOrderUsingGETCall(Long orderId, String since, String until, Integer limit, Integer offset, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{orderId}/transactions"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (contactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact_id", contactId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransactionsForOrderUsingGETValidateBeforeCall(Long orderId, String since, String until, Integer limit, Integer offset, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling listTransactionsForOrderUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = listTransactionsForOrderUsingGETCall(orderId, since, until, limit, offset, contactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Order Transactions
     * Retrieves a list of all transactions on a given order using the specified search criteria
     * @param orderId orderId (required)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Returns transactions for the provided contact id (optional)
     * @return InfusionsoftTransactionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTransactionList listTransactionsForOrderUsingGET(Long orderId, String since, String until, Integer limit, Integer offset, Long contactId) throws ApiException {
        ApiResponse<InfusionsoftTransactionList> resp = listTransactionsForOrderUsingGETWithHttpInfo(orderId, since, until, limit, offset, contactId);
        return resp.getData();
    }

    /**
     * Retrieve Order Transactions
     * Retrieves a list of all transactions on a given order using the specified search criteria
     * @param orderId orderId (required)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Returns transactions for the provided contact id (optional)
     * @return ApiResponse&lt;InfusionsoftTransactionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTransactionList> listTransactionsForOrderUsingGETWithHttpInfo(Long orderId, String since, String until, Integer limit, Integer offset, Long contactId) throws ApiException {
        com.squareup.okhttp.Call call = listTransactionsForOrderUsingGETValidateBeforeCall(orderId, since, until, limit, offset, contactId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTransactionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Order Transactions (asynchronously)
     * Retrieves a list of all transactions on a given order using the specified search criteria
     * @param orderId orderId (required)
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Returns transactions for the provided contact id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransactionsForOrderUsingGETAsync(Long orderId, String since, String until, Integer limit, Integer offset, Long contactId, final ApiCallback<InfusionsoftTransactionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransactionsForOrderUsingGETValidateBeforeCall(orderId, since, until, limit, offset, contactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTransactionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransactionsUsingGET
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Returns transactions for the provided contact id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransactionsUsingGETCall(String since, String until, Integer limit, Integer offset, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (contactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact_id", contactId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransactionsUsingGETValidateBeforeCall(String since, String until, Integer limit, Integer offset, Long contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listTransactionsUsingGETCall(since, until, limit, offset, contactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Transactions
     * Retrieves a list transactions for a given contact
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Returns transactions for the provided contact id (optional)
     * @return InfusionsoftTransactionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfusionsoftTransactionList listTransactionsUsingGET(String since, String until, Integer limit, Integer offset, Long contactId) throws ApiException {
        ApiResponse<InfusionsoftTransactionList> resp = listTransactionsUsingGETWithHttpInfo(since, until, limit, offset, contactId);
        return resp.getData();
    }

    /**
     * List Transactions
     * Retrieves a list transactions for a given contact
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Returns transactions for the provided contact id (optional)
     * @return ApiResponse&lt;InfusionsoftTransactionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfusionsoftTransactionList> listTransactionsUsingGETWithHttpInfo(String since, String until, Integer limit, Integer offset, Long contactId) throws ApiException {
        com.squareup.okhttp.Call call = listTransactionsUsingGETValidateBeforeCall(since, until, limit, offset, contactId, null, null);
        Type localVarReturnType = new TypeToken<InfusionsoftTransactionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Transactions (asynchronously)
     * Retrieves a list transactions for a given contact
     * @param since Date to start searching from ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param until Date to search to ex. &#x60;2017-01-01T22:17:59.039Z&#x60; (optional)
     * @param limit Sets a total of items to return (optional)
     * @param offset Sets a beginning range of items to return (optional)
     * @param contactId Returns transactions for the provided contact id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransactionsUsingGETAsync(String since, String until, Integer limit, Integer offset, Long contactId, final ApiCallback<InfusionsoftTransactionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransactionsUsingGETValidateBeforeCall(since, until, limit, offset, contactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfusionsoftTransactionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

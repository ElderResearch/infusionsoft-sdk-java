/*
 * Infusionsoft REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.infusionsoft.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.infusionsoft.model.InfusionsoftCustomFieldOption;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InfusionsoftCustomFieldMetaData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-08T21:00:11.570Z")
public class InfusionsoftCustomFieldMetaData {
  /**
   * Gets or Sets fieldType
   */
  @JsonAdapter(FieldTypeEnum.Adapter.class)
  public enum FieldTypeEnum {
    CURRENCY("Currency"),
    
    DATE("Date"),
    
    DATETIME("DateTime"),
    
    DAYOFWEEK("DayOfWeek"),
    
    DRILLDOWN("Drilldown"),
    
    EMAIL("Email"),
    
    MONTH("Month"),
    
    LISTBOX("ListBox"),
    
    NAME("Name"),
    
    WHOLENUMBER("WholeNumber"),
    
    DECIMALNUMBER("DecimalNumber"),
    
    PERCENT("Percent"),
    
    PHONENUMBER("PhoneNumber"),
    
    RADIO("Radio"),
    
    DROPDOWN("Dropdown"),
    
    SOCIALSECURITYNUMBER("SocialSecurityNumber"),
    
    STATE("State"),
    
    TEXT("Text"),
    
    TEXTAREA("TextArea"),
    
    USER("User"),
    
    USERLISTBOX("UserListBox"),
    
    WEBSITE("Website"),
    
    YEAR("Year"),
    
    YESNO("YesNo");

    private String value;

    FieldTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FieldTypeEnum fromValue(String text) {
      for (FieldTypeEnum b : FieldTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FieldTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FieldTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FieldTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FieldTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("field_type")
  private FieldTypeEnum fieldType = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("options")
  private List<InfusionsoftCustomFieldOption> options = null;

  public InfusionsoftCustomFieldMetaData fieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
    return this;
  }

   /**
   * Get fieldType
   * @return fieldType
  **/
  @ApiModelProperty(value = "")
  public FieldTypeEnum getFieldType() {
    return fieldType;
  }

  public void setFieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
  }

  public InfusionsoftCustomFieldMetaData id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public InfusionsoftCustomFieldMetaData label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @ApiModelProperty(value = "")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public InfusionsoftCustomFieldMetaData options(List<InfusionsoftCustomFieldOption> options) {
    this.options = options;
    return this;
  }

  public InfusionsoftCustomFieldMetaData addOptionsItem(InfusionsoftCustomFieldOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<InfusionsoftCustomFieldOption>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @ApiModelProperty(value = "")
  public List<InfusionsoftCustomFieldOption> getOptions() {
    return options;
  }

  public void setOptions(List<InfusionsoftCustomFieldOption> options) {
    this.options = options;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfusionsoftCustomFieldMetaData customFieldMetaData = (InfusionsoftCustomFieldMetaData) o;
    return Objects.equals(this.fieldType, customFieldMetaData.fieldType) &&
        Objects.equals(this.id, customFieldMetaData.id) &&
        Objects.equals(this.label, customFieldMetaData.label) &&
        Objects.equals(this.options, customFieldMetaData.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldType, id, label, options);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfusionsoftCustomFieldMetaData {\n");
    
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

